{"version":3,"file":"bundle.14.js","sources":["webpack:///./docs/Examples/next/Detail.md","webpack:///./packages/next/node_modules/classnames/index.js","webpack:///./packages/printer/src/index.js","webpack:///./packages/next/src/utils.js","webpack:///./packages/next/src/form.js","webpack:///./packages/next/src/fields/array.js","webpack:///./packages/next/src/fields/cards.js","webpack:///./packages/next/src/fields/table.js","webpack:///./packages/next/src/fields/password.js","webpack:///./packages/next/src/components/formButtonGroup.js","webpack:///./packages/next/src/components/button.js","webpack:///./packages/next/src/components/layout.js","webpack:///./packages/next/src/index.js","webpack:///./packages/next/node_modules/moveto/dist/moveTo.js"],"sourcesContent":["\"use strict\";\n\nvar React = require('/Users/wangzhili/uform/node_modules/_react@16.8.6@react/index.js');\n\nvar ReactDOM = require('/Users/wangzhili/uform/node_modules/_react-dom@16.8.6@react-dom/index.js');\n\nvar ReactCodeSnippet = require('/Users/wangzhili/uform/node_modules/_react-code-snippet@0.6.13@react-code-snippet/lib/index.js');\n\nvar ReactPropsTable = require('/Users/wangzhili/uform/node_modules/_react-props-table@0.1.3@react-props-table/lib/index.js');\n\nvar __DEFINE__ = function __DEFINE__(fn) {\n  var module = {\n    exports: {}\n  };\n  fn(module, module.exports);\n  var component = module.exports.__esModule && module.exports['default'] || module.exports;\n  return typeof component === 'function' ? component : function () {\n    return React.createElement('div', {}, 'Code snippet should export a component!');\n  };\n};\n\nvar Demo_wlbnt_0 = __DEFINE__(function (module, exports) {\n  var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\n  var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\n  exports.__esModule = true;\n  exports[\"default\"] = _default;\n\n  var _react = _interopRequireWildcard(require(\"react\"));\n\n  var _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\n  var _next = require(\"@uform/next\");\n\n  var _next2 = require(\"@alifd/next\");\n\n  var _printer = _interopRequireDefault(require(\"@uform/printer\"));\n\n  require(\"@alifd/next/dist/next.css\");\n\n  var actions = (0, _next.createFormActions)();\n\n  var App = function App() {\n    var _useState = (0, _react.useState)({\n      editable: false\n    }),\n        state = _useState[0],\n        setState = _useState[1];\n\n    return _react[\"default\"].createElement(_printer[\"default\"], null, _react[\"default\"].createElement(_next.SchemaForm, {\n      actions: actions,\n      initialValues: state.value,\n      editable: state.editable,\n      labelCol: 7,\n      wrapperCol: 12\n    }, _react[\"default\"].createElement(_next.FormCard, {\n      title: \"aaa\",\n      name: \"card1\"\n    }, _react[\"default\"].createElement(_next.FormCard, {\n      title: \"aaa\",\n      name: \"card\"\n    }, _react[\"default\"].createElement(_next.Field, {\n      type: \"string\",\n      name: \"string\",\n      required: true,\n      title: \"\\u5B57\\u7B26\\u4E32\",\n      \"x-props\": {\n        addonTextAfter: '%'\n      }\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"radio\",\n      \"enum\": [{\n        label: '选项1',\n        value: '1'\n      }, {\n        label: '选项2',\n        value: '2'\n      }, {\n        label: '选项3',\n        value: '3'\n      }, {\n        label: '选项4',\n        value: '4'\n      }],\n      required: true,\n      title: \"Radio\",\n      name: \"radio\"\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"string\",\n      \"enum\": [{\n        label: '选项1',\n        value: '1'\n      }, {\n        label: '选项2',\n        value: '2'\n      }, {\n        label: '选项3',\n        value: '3'\n      }, {\n        label: '选项4',\n        value: '4'\n      }],\n      required: true,\n      title: \"Select\\u5355\\u9009\",\n      name: \"select\"\n    }))), _react[\"default\"].createElement(_next.FormCard, {\n      title: \"bbbb\"\n    }, _react[\"default\"].createElement(_next.Field, {\n      type: \"string\",\n      \"enum\": [{\n        label: '选项1',\n        value: '1'\n      }, {\n        label: '选项2',\n        value: '2'\n      }, {\n        label: '选项3',\n        value: '3'\n      }, {\n        label: '选项4',\n        value: '4'\n      }],\n      required: true,\n      title: \"Select\\u591A\\u9009\",\n      \"x-props\": {\n        multiple: true\n      },\n      name: \"multiselect\"\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"checkbox\",\n      \"enum\": [{\n        label: '选项1',\n        value: '1'\n      }, {\n        label: '选项2',\n        value: '2'\n      }, {\n        label: '选项3',\n        value: '3'\n      }, {\n        label: '选项4',\n        value: '4'\n      }],\n      required: true,\n      title: \"Checkbox\",\n      name: \"checkbox\"\n    })), _react[\"default\"].createElement(_next.Field, {\n      type: \"number\",\n      title: \"\\u6570\\u5B57\\u9009\\u62E9\",\n      name: \"number\"\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"boolean\",\n      title: \"\\u5F00\\u5173\\u9009\\u62E9\",\n      name: \"boolean\"\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"date\",\n      title: \"\\u65E5\\u671F\\u9009\\u62E9\",\n      name: \"date\"\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"daterange\",\n      title: \"\\u65E5\\u671F\\u8303\\u56F4\",\n      name: \"daterange\"\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"year\",\n      title: \"\\u5E74\\u4EFD\",\n      name: \"year\"\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"time\",\n      title: \"\\u65F6\\u95F4\",\n      name: \"time\"\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"upload\",\n      title: \"\\u5361\\u7247\\u4E0A\\u4F20\\u6587\\u4EF6\",\n      name: \"upload\",\n      \"x-props\": {\n        listType: 'card'\n      }\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"upload\",\n      title: \"\\u62D6\\u62FD\\u4E0A\\u4F20\\u6587\\u4EF6\",\n      name: \"upload2\",\n      \"x-props\": {\n        listType: 'dragger'\n      }\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"upload\",\n      title: \"\\u666E\\u901A\\u4E0A\\u4F20\\u6587\\u4EF6\",\n      name: \"upload3\",\n      \"x-props\": {\n        listType: 'text'\n      }\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"range\",\n      title: \"\\u8303\\u56F4\\u9009\\u62E9\",\n      name: \"range\",\n      \"x-props\": {\n        min: 0,\n        max: 1024,\n        marks: [0, 1024]\n      }\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"transfer\",\n      title: \"\\u7A7F\\u68AD\\u6846\",\n      name: \"transfer\"\n    }), _react[\"default\"].createElement(_next.Field, {\n      type: \"rating\",\n      title: \"\\u7B49\\u7EA7\",\n      name: \"rating\"\n    }), _react[\"default\"].createElement(_next.FormButtonGroup, {\n      offset: 7,\n      sticky: true\n    }, _react[\"default\"].createElement(_next.Submit, null), _react[\"default\"].createElement(_next2.Button, {\n      type: \"primary\",\n      onClick: function onClick() {\n        return setState({\n          editable: !state.editable\n        });\n      }\n    }, !state.editable ? '编辑' : '详情'), _react[\"default\"].createElement(_next2.Button, {\n      onClick: function onClick() {\n        setState({\n          value: {\n            string: 200,\n            radio: '1',\n            select: '2',\n            multiselect: ['2', '3'],\n            checkbox: ['1', '2'],\n            number: 123333,\n            \"boolean\": true,\n            date: '2018-11-30',\n            daterange: ['2018-11-30', '2019-01-02'],\n            year: '2018',\n            time: '22:00:00',\n            upload: [{\n              downloadURL: '//img.alicdn.com/tfs/TB1n8jfr1uSBuNjy1XcXXcYjFXa-200-200.png',\n              imgURL: '//img.alicdn.com/tfs/TB1n8jfr1uSBuNjy1XcXXcYjFXa-200-200.png',\n              name: 'doc.svg'\n            }],\n            range: 200,\n            rating: 3\n          }\n        });\n      }\n    }, \"\\u52A0\\u8F7D\\u8BE6\\u60C5\\u6570\\u636E\"), _react[\"default\"].createElement(_next2.Button, {\n      onClick: function onClick() {\n        actions.validate();\n      }\n    }, \"\\u624B\\u52A8\\u89E6\\u53D1\\u6821\\u9A8C\"), _react[\"default\"].createElement(_next.Reset, null))));\n  };\n\n  function _default() {\n    return _react[\"default\"].createElement(App, null);\n  }\n});\n\nvar __MARKDOWN__ = function __MARKDOWN__() {\n  return React.createElement(React.Fragment, {}, React.createElement(\"h1\", {\n    id: \"表单详情\",\n    className: \"react-demo-h1\"\n  }, \"表单详情\"), React.createElement(\"h4\", {\n    id: \"demo-示例\",\n    className: \"react-demo-h4\"\n  }, \"Demo 示例\"), React.createElement(ReactCodeSnippet, {\n    code: \"import React, { useState } from 'react'\\nimport ReactDOM from 'react-dom'\\nimport {\\n  SchemaForm,\\n  Field,\\n  FormButtonGroup,\\n  Submit,\\n  Reset,\\n  FormItemGrid,\\n  FormCard,\\n  FormPath,\\n  FormBlock,\\n  FormLayout,\\n  createFormActions\\n} from '@uform/next'\\nimport { Button } from '@alifd/next'\\nimport Printer from '@uform/printer'\\nimport '@alifd/next/dist/next.css'\\nconst actions = createFormActions()\\n\\nconst App = () => {\\n  const [state, setState] = useState({ editable: false })\\n  return (\\n    <Printer>\\n      <SchemaForm\\n        actions={actions}\\n        initialValues={state.value}\\n        editable={state.editable}\\n        labelCol={7}\\n        wrapperCol={12}\\n      >\\n        <FormCard title=\\\"aaa\\\" name=\\\"card1\\\">\\n          <FormCard title=\\\"aaa\\\" name=\\\"card\\\">\\n            <Field\\n              type=\\\"string\\\"\\n              name=\\\"string\\\"\\n              required\\n              title=\\\"字符串\\\"\\n              x-props={{\\n                addonTextAfter: '%'\\n              }}\\n            />\\n            <Field\\n              type=\\\"radio\\\"\\n              enum={[\\n                { label: '选项1', value: '1' },\\n                { label: '选项2', value: '2' },\\n                { label: '选项3', value: '3' },\\n                { label: '选项4', value: '4' }\\n              ]}\\n              required\\n              title=\\\"Radio\\\"\\n              name=\\\"radio\\\"\\n            />\\n            <Field\\n              type=\\\"string\\\"\\n              enum={[\\n                { label: '选项1', value: '1' },\\n                { label: '选项2', value: '2' },\\n                { label: '选项3', value: '3' },\\n                { label: '选项4', value: '4' }\\n              ]}\\n              required\\n              title=\\\"Select单选\\\"\\n              name=\\\"select\\\"\\n            />\\n          </FormCard>\\n        </FormCard>\\n        <FormCard title=\\\"bbbb\\\">\\n          <Field\\n            type=\\\"string\\\"\\n            enum={[\\n              { label: '选项1', value: '1' },\\n              { label: '选项2', value: '2' },\\n              { label: '选项3', value: '3' },\\n              { label: '选项4', value: '4' }\\n            ]}\\n            required\\n            title=\\\"Select多选\\\"\\n            x-props={{ multiple: true }}\\n            name=\\\"multiselect\\\"\\n          />\\n          <Field\\n            type=\\\"checkbox\\\"\\n            enum={[\\n              { label: '选项1', value: '1' },\\n              { label: '选项2', value: '2' },\\n              { label: '选项3', value: '3' },\\n              { label: '选项4', value: '4' }\\n            ]}\\n            required\\n            title=\\\"Checkbox\\\"\\n            name=\\\"checkbox\\\"\\n          />\\n        </FormCard>\\n        <Field type=\\\"number\\\" title=\\\"数字选择\\\" name=\\\"number\\\" />\\n        <Field type=\\\"boolean\\\" title=\\\"开关选择\\\" name=\\\"boolean\\\" />\\n        <Field type=\\\"date\\\" title=\\\"日期选择\\\" name=\\\"date\\\" />\\n        <Field type=\\\"daterange\\\" title=\\\"日期范围\\\" name=\\\"daterange\\\" />\\n        <Field type=\\\"year\\\" title=\\\"年份\\\" name=\\\"year\\\" />\\n        <Field type=\\\"time\\\" title=\\\"时间\\\" name=\\\"time\\\" />\\n        <Field\\n          type=\\\"upload\\\"\\n          title=\\\"卡片上传文件\\\"\\n          name=\\\"upload\\\"\\n          x-props={{ listType: 'card' }}\\n        />\\n        <Field\\n          type=\\\"upload\\\"\\n          title=\\\"拖拽上传文件\\\"\\n          name=\\\"upload2\\\"\\n          x-props={{ listType: 'dragger' }}\\n        />\\n        <Field\\n          type=\\\"upload\\\"\\n          title=\\\"普通上传文件\\\"\\n          name=\\\"upload3\\\"\\n          x-props={{ listType: 'text' }}\\n        />\\n        <Field\\n          type=\\\"range\\\"\\n          title=\\\"范围选择\\\"\\n          name=\\\"range\\\"\\n          x-props={{ min: 0, max: 1024, marks: [0, 1024] }}\\n        />\\n        <Field type=\\\"transfer\\\" title=\\\"穿梭框\\\" name=\\\"transfer\\\" />\\n        <Field type=\\\"rating\\\" title=\\\"等级\\\" name=\\\"rating\\\" />\\n        <FormButtonGroup offset={7} sticky>\\n          <Submit />\\n          <Button\\n            type=\\\"primary\\\"\\n            onClick={() => setState({ editable: !state.editable })}\\n          >\\n            {!state.editable ? '编辑' : '详情'}\\n          </Button>\\n          <Button\\n            onClick={() => {\\n              setState({\\n                value: {\\n                  string: 200,\\n                  radio: '1',\\n                  select: '2',\\n                  multiselect: ['2', '3'],\\n                  checkbox: ['1', '2'],\\n                  number: 123333,\\n                  boolean: true,\\n                  date: '2018-11-30',\\n                  daterange: ['2018-11-30', '2019-01-02'],\\n                  year: '2018',\\n                  time: '22:00:00',\\n                  upload: [\\n                    {\\n                      downloadURL:\\n                        '//img.alicdn.com/tfs/TB1n8jfr1uSBuNjy1XcXXcYjFXa-200-200.png',\\n                      imgURL:\\n                        '//img.alicdn.com/tfs/TB1n8jfr1uSBuNjy1XcXXcYjFXa-200-200.png',\\n                      name: 'doc.svg'\\n                    }\\n                  ],\\n                  range: 200,\\n                  rating: 3\\n                }\\n              })\\n            }}\\n          >\\n            加载详情数据\\n          </Button>\\n          <Button\\n            onClick={() => {\\n              actions.validate()\\n            }}\\n          >\\n            手动触发校验\\n          </Button>\\n          <Reset />\\n        </FormButtonGroup>\\n      </SchemaForm>\\n    </Printer>\\n  )\\n}\\n\\nReactDOM.render(<App />, document.getElementById('root'))\\n\",\n    justCode: false,\n    lang: \"jsx\"\n  }, React.createElement(Demo_wlbnt_0, {})));\n};\n\n__MARKDOWN__.meta = {\n  \"username\": \"zhili.wzl\",\n  \"email\": \"wangzhili56@126.com\"\n};\nmodule.exports = __MARKDOWN__;","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport { createFormActions } from '@uform/react'\nimport styled from 'styled-components'\nimport Modal from 'react-modal'\n\nconst Dialog = styled(props => {\n  const [visible, setVisible] = useState(true)\n  return (\n    <Modal\n      {...props}\n      style={{ overlay: { zIndex: 99999 } }}\n      isOpen={visible}\n      onRequestClose={() => {\n        setVisible(false)\n      }}\n    >\n      <div\n        className='close-btn'\n        onClick={() => {\n          setVisible(false)\n        }}\n      >\n        <img src='//img.alicdn.com/tfs/TB1KikcO5rpK1RjSZFhXXXSdXXa-200-200.svg' />\n      </div>\n      <div className='dialog-content' style={{ overflow: 'auto' }}>\n        {props.children}\n      </div>\n    </Modal>\n  )\n})`\n  position: relative;\n  margin: 100px;\n  padding: 30px;\n  height: calc(100% - 200px);\n  overflow: auto;\n  border: 1px solid #eee;\n  background: #fff;\n  outline: none;\n  .close-btn {\n    position: absolute;\n    top: 15px;\n    right: 10px;\n    width: 25px;\n    height: 25px;\n    cursor: pointer;\n    img {\n      width: 100%;\n    }\n  }\n  .dialog-content {\n    overflow: auto;\n    height: 100%;\n  }\n`\n\nconst createAlert = (config = {}) => {\n  const container = document.createElement('div')\n  const unMount = () => {\n    ReactDOM.unmountComponentAtNode(container)\n    container.parentNode.removeChild(container)\n  }\n  if (typeof config === 'string' || React.isValidElement(config)) {\n    config = {\n      content: config\n    }\n  }\n  document.body.appendChild(container)\n  ReactDOM.render(\n    <Dialog {...config} appElement={container} afterClose={unMount}>\n      {config.content}\n    </Dialog>,\n    container\n  )\n}\n\nconst cleanSchema = schema => {\n  if (!schema) return\n  return {\n    type: schema.type,\n    'x-props': schema['x-props'],\n    'x-component': schema['x-component'],\n    'x-index': schema['x-index'],\n    'x-rules': schema['x-rules'],\n    maxItems: schema.maxItems,\n    minItems: schema.minItems,\n    default: schema.default,\n    enum: schema.enum,\n    title: schema.title,\n    required: schema.required,\n\n    properties: Object.keys(schema.properties || {}).reduce((buf, key) => {\n      buf[key] = cleanSchema(schema.properties[key])\n      return buf\n    }, {}),\n    items: cleanSchema(schema.items)\n  }\n}\n\nconst printSchema = schema => {\n  return JSON.stringify(cleanSchema(schema), null, 2)\n}\n\nexport default class extends React.Component {\n  actions = createFormActions()\n\n  onClickHandler = async e => {\n    e.preventDefault()\n    const schema = await this.actions.getSchema('')\n    createAlert(\n      <pre>\n        <code>{printSchema(schema)}</code>\n      </pre>\n    )\n  }\n\n  render() {\n    const { children, className } = this.props\n    if (children && children.props && children.props.actions) {\n      this.actions = children.props.actions\n    }\n    return (\n      <div className={className}>\n        {React.cloneElement(children, {\n          actions: this.actions\n        })}\n        <a\n          href=''\n          style={{\n            fontSize: 12,\n            textDecoration: 'none',\n            margin: '20px 0',\n            display: 'block',\n            textAlign: 'center'\n          }}\n          onClick={this.onClickHandler}\n        >\n          Print JSON Schema\n        </a>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Select } from '@alifd/next'\nimport styled from 'styled-components'\nimport { isFn } from '@uform/utils'\nimport MoveTo from 'moveto'\nexport * from '@uform/utils'\n\nconst Text = styled(props => {\n  let value\n  if (props.dataSource && props.dataSource.length) {\n    let find = props.dataSource.filter(({ value }) =>\n      Array.isArray(props.value)\n        ? props.value.indexOf(value) > -1\n        : props.value === value\n    )\n    value = find.map(item => item.label).join(' , ')\n  } else {\n    value = Array.isArray(props.value)\n      ? props.value.join(' ~ ')\n      : String(props.value === undefined || props.value === null ? '' : props.value)\n  }\n  return (\n    <div className={`${props.className} ${props.size || ''} text-field`}>\n      {!value ? 'N/A' : value}\n      {props.addonTextAfter ? ' ' + props.addonTextAfter : ''}\n      {props.addonAfter ? ' ' + props.addonAfter : ''}\n    </div>\n  )\n})`\n  height: 28px;\n  line-height: 28px;\n  vertical-align: middle;\n  font-size: 13px;\n  color: #333;\n  &.small {\n    height: 20px;\n    line-height: 20px;\n  }\n  &.large {\n    height: 40px;\n    line-height: 40px;\n  }\n`\n\nexport const acceptEnum = component => {\n  return ({ dataSource, ...others }) => {\n    if (dataSource) {\n      return React.createElement(Select, { dataSource, ...others })\n    } else {\n      return React.createElement(component, others)\n    }\n  }\n}\n\nexport const mapStyledProps = (props, { loading, size }) => {\n  if (loading) {\n    props.state = props.state || 'loading'\n  }\n  if (size) {\n    props.size = size\n  }\n}\n\nexport const mapTextComponent = (Target, props, { editable, name }) => {\n  if (editable !== undefined) {\n    if (isFn(editable)) {\n      if (!editable(name)) {\n        return Text\n      }\n    } else if (editable === false) {\n      return Text\n    }\n  }\n  return Target\n}\n\nexport const compose = (...args) => {\n  return (payload, ...extra) => {\n    return args.reduce((buf, fn) => {\n      return buf !== undefined ? fn(buf, ...extra) : fn(payload, ...extra)\n    }, payload)\n  }\n}\n\nexport const moveTo = element => {\n  if (!element) return\n  if (element.scrollIntoView) {\n    element.scrollIntoView({\n      behavior: 'smooth',\n      inline: 'start',\n      block: 'start'\n    })\n  } else {\n    new MoveTo().move(element.getBoundingClientRect().top)\n  }\n}\n","import React from 'react'\nimport { registerFormWrapper, registerFieldMiddleware } from '@uform/react'\nimport classNames from 'classnames'\nimport { ConfigProvider, Balloon, Icon } from '@alifd/next'\nimport { Row, Col } from '@alifd/next/lib/grid'\nimport LOCALE from './locale'\nimport styled from 'styled-components'\nimport { isFn, moveTo } from './utils'\n/**\n * 轻量级Next Form，不包含任何数据管理能力\n *\n */\n\nexport const {\n  Provider: FormProvider,\n  Consumer: FormConsumer\n} = React.createContext()\n\nconst normalizeCol = col => {\n  return typeof col === 'object' ? col : { span: col }\n}\n\nconst getParentNode = (node, selector) => {\n  if (!node || (node && !node.matches)) return\n  if (node.matches(selector)) return node\n  else {\n    return getParentNode(node.parentNode || node.parentElement, selector)\n  }\n}\n\nexport const FormItem = styled(\n  class FormItem extends React.Component {\n    static defaultProps = {\n      prefix: 'next-'\n    }\n\n    getItemLabel() {\n      const {\n        id,\n        required,\n        label,\n        labelCol,\n        wrapperCol,\n        prefix,\n        extra,\n        labelAlign,\n        labelTextAlign,\n        autoAddColon,\n        isTableColItem\n      } = this.props\n\n      if (!label || isTableColItem) {\n        return null\n      }\n\n      const ele = (\n        <label htmlFor={id} required={required} key='label'>\n          {label}\n          {label === ' ' ? '' : autoAddColon ? '：' : ''}\n        </label>\n      )\n\n      const cls = classNames({\n        [`${prefix}form-item-label`]: true,\n        [`${prefix}left`]: labelTextAlign === 'left'\n      })\n\n      if ((wrapperCol || labelCol) && labelAlign !== 'top') {\n        return (\n          <Col {...normalizeCol(labelCol)} className={cls}>\n            {ele}\n            {((extra && extra.length > 20) || React.isValidElement(extra)) &&\n              this.renderHelper()}\n          </Col>\n        )\n      }\n\n      return (\n        <div className={cls}>\n          {ele}\n          {((extra && extra.length > 20) || React.isValidElement(extra)) &&\n            this.renderHelper()}\n        </div>\n      )\n    }\n\n    getItemWrapper() {\n      const {\n        labelCol,\n        wrapperCol,\n        children,\n        extra,\n        label,\n        labelAlign,\n        help,\n        size,\n        prefix,\n        noMinHeight,\n        isTableColItem\n      } = this.props\n\n      const message = (\n        <div\n          className={`${prefix}form-item-msg ${\n            !noMinHeight ? `${prefix}form-item-space` : ''\n          }`}\n        >\n          {help && <div className={`${prefix}form-item-help`}>{help}</div>}\n          {!help && extra && extra.length <= 20 && (\n            <div className={`${prefix}form-item-extra`}>{extra}</div>\n          )}\n        </div>\n      )\n      if (\n        (wrapperCol || labelCol) &&\n        labelAlign !== 'top' &&\n        !isTableColItem &&\n        label\n      ) {\n        return (\n          <Col\n            {...normalizeCol(wrapperCol)}\n            className={`${prefix}form-item-control`}\n            key='item'\n          >\n            {React.cloneElement(children, { size })}\n            {message}\n          </Col>\n        )\n      }\n\n      return (\n        <div className={`${prefix}form-item-control`}>\n          {React.cloneElement(children, { size })}\n          {message}\n        </div>\n      )\n    }\n\n    renderHelper() {\n      return (\n        <Balloon\n          closable={false}\n          align='t'\n          trigger={<Icon type='help' size='small' />}\n        >\n          {this.props.extra}\n        </Balloon>\n      )\n    }\n\n    render() {\n      const {\n        className,\n        labelAlign,\n        labelTextAlign,\n        style,\n        prefix,\n        wrapperCol,\n        labelCol,\n        size,\n        help,\n        extra,\n        noMinHeight,\n        isTableColItem,\n        validateState,\n        autoAddColon,\n        required,\n        type,\n        schema,\n        ...others\n      } = this.props\n\n      const itemClassName = classNames({\n        [`${prefix}form-item`]: true,\n        [`${prefix}${labelAlign}`]: labelAlign,\n        [`has-${validateState}`]: !!validateState,\n        [`${prefix}${size}`]: !!size,\n        [`${className}`]: !!className,\n        [`field-${type}`]: !!type\n      })\n\n      // 垂直模式并且左对齐才用到\n      const Tag = (wrapperCol || labelCol) && labelAlign !== 'top' ? Row : 'div'\n      const label = labelAlign === 'inset' ? null : this.getItemLabel()\n\n      return (\n        <Tag {...others} gutter={0} className={itemClassName} style={style}>\n          {label}\n          {this.getItemWrapper()}\n        </Tag>\n      )\n    }\n  }\n)`\n  margin-bottom: 4px !important;\n  &.field-table {\n    .next-form-item-control {\n      overflow: auto;\n    }\n  }\n  .next-form-item-msg {\n    &.next-form-item-space {\n      min-height: 20px;\n      .next-form-item-help,\n      .next-form-item-extra {\n        margin-top: 0;\n      }\n    }\n  }\n  .next-form-item-extra {\n    color: #888;\n    font-size: 12px;\n    line-height: 1.7;\n  }\n`\n\nconst toArr = val => (Array.isArray(val) ? val : val ? [val] : [])\n\nregisterFormWrapper(OriginForm => {\n  OriginForm = styled(OriginForm)`\n    &.next-inline {\n      display: flex;\n      .rs-uform-content {\n        margin-right: 15px;\n      }\n    }\n    .next-radio-group,\n    .next-checkbox-group {\n      line-height: 28px;\n      & > label {\n        margin-right: 8px;\n      }\n    }\n    .next-small {\n      .next-radio-group,\n      .next-checkbox-group {\n        line-height: 20px;\n      }\n    }\n    .next-small {\n      .next-radio-group,\n      .next-checkbox-group {\n        line-height: 40px;\n      }\n    }\n    .next-card-head {\n      background: none;\n    }\n    .next-rating-medium {\n      min-height: 28px;\n      line-height: 28px;\n    }\n    .next-rating-small {\n      min-height: 20px;\n      line-height: 20px;\n    }\n    .next-rating-large {\n      min-height: 40px;\n      line-height: 40px;\n    }\n  `\n\n  return ConfigProvider.config(\n    class Form extends React.Component {\n      static defaultProps = {\n        component: 'form',\n        prefix: 'next-',\n        size: 'medium',\n        labelAlign: 'left',\n        locale: LOCALE,\n        autoAddColon: true\n      }\n\n      static displayName = 'SchemaForm'\n\n      FormRef = React.createRef()\n\n      validateFailedHandler(onValidateFailed) {\n        return (...args) => {\n          if (isFn(onValidateFailed)) {\n            onValidateFailed(...args)\n          }\n          const container = this.FormRef.current\n          if (container) {\n            const errors = container.querySelectorAll('.next-form-item-help')\n            if (errors && errors.length) {\n              const node = getParentNode(errors[0], '.next-form-item')\n              if (node) {\n                moveTo(node)\n              }\n            }\n          }\n        }\n      }\n\n      render() {\n        const {\n          className,\n          inline,\n          size,\n          labelAlign,\n          labelTextAlign,\n          autoAddColon,\n          children,\n          component,\n          labelCol,\n          wrapperCol,\n          getErrorScrollOffset,\n          errorScrollToElement,\n          style,\n          prefix,\n          ...others\n        } = this.props\n        const formClassName = classNames({\n          [`${prefix}form`]: true,\n          [`${prefix}inline`]: inline, // 内联\n          [`${prefix}${size}`]: size,\n          [className]: !!className\n        })\n        return (\n          <FormProvider\n            value={{\n              labelAlign,\n              labelTextAlign,\n              labelCol,\n              wrapperCol,\n              inline,\n              size,\n              autoAddColon,\n              FormRef: this.FormRef\n            }}\n          >\n            <OriginForm\n              {...others}\n              formRef={this.FormRef}\n              onValidateFailed={this.validateFailedHandler(\n                others.onValidateFailed\n              )}\n              className={formClassName}\n              style={style}\n            >\n              {children}\n            </OriginForm>\n          </FormProvider>\n        )\n      }\n    }\n  )\n})\n\nconst isTableColItem = (path, getSchema) => {\n  const schema = getSchema(path)\n  return schema && schema.type === 'array' && schema['x-component'] === 'table'\n}\n\nregisterFieldMiddleware(Field => {\n  return props => {\n    const { name, editable, errors, path, schema, getSchema, required } = props\n    if (path.length === 0) return React.createElement(Field, props) // 根节点是不需要包FormItem的\n    return React.createElement(\n      FormConsumer,\n      {},\n      ({\n        labelAlign,\n        labelTextAlign,\n        labelCol,\n        wrapperCol,\n        size,\n        autoAddColon\n      }) => {\n        return React.createElement(\n          FormItem,\n          {\n            labelAlign,\n            labelTextAlign,\n            labelCol,\n            wrapperCol,\n            autoAddColon,\n            size,\n            ...schema['x-item-props'],\n            label: schema.title,\n            noMinHeight: schema.type === 'object' && !schema['x-component'],\n            isTableColItem: isTableColItem(\n              path.slice(0, path.length - 2),\n              getSchema\n            ),\n            type: schema['x-component'] || schema['type'],\n            id: name,\n            validateState: toArr(errors).length ? 'error' : undefined,\n            required: editable === false ? false : required,\n            extra: schema.description,\n            help:\n              toArr(errors).join(' , ') ||\n              (schema['x-item-props'] && schema['x-item-props'].help)\n          },\n          React.createElement(Field, props)\n        )\n      }\n    )\n  }\n})\n","import React from 'react'\nimport { registerFormField, createArrayField } from '@uform/react'\nimport { Button, Icon } from '@alifd/next'\nimport styled from 'styled-components'\n\nexport const CircleButton = styled.div.attrs({ className: 'cricle-btn' })`\n  ${props =>\n    !props.hasText\n      ? `width:30px;\n  height:30px;`\n      : ''}\n  margin-right:10px;\n  border-radius: ${props => (!props.hasText ? '100px' : 'none')};\n  border: ${props => (!props.hasText ? '1px solid #eee' : 'none')};\n  margin-bottom:20px;\n  cursor:pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 1.3;\n  ${props =>\n    !props.hasText\n      ? `&:hover{\n    background:#f7f4f4;\n  }`\n      : ''}\n      .next-icon{\n    display:flex;\n    align-items:'center'\n  }\n  .op-name{\n    margin-left:3px;\n  }\n}\n`\nexport const ArrayField = createArrayField({\n  CircleButton,\n  TextButton: props => (\n    <Button text size='large'>\n      {props.children}\n    </Button>\n  ),\n  AddIcon: () => <Icon type='add' className='next-icon-first' />,\n  RemoveIcon: () => (\n    <Icon size='xs' type='ashbin' className='next-icon-first' />\n  ),\n  MoveDownIcon: () => (\n    <Icon size='xs' type='arrow-down' className='next-icon-first' />\n  ),\n  MoveUpIcon: () => (\n    <Icon size='xs' type='arrow-up' className='next-icon-first' />\n  )\n})\n\nregisterFormField(\n  'array',\n  styled(\n    class extends ArrayField {\n      render() {\n        const { className, name, schema, value, renderField } = this.props\n        const style = (schema['x-props'] && schema['x-props'].style) || {}\n        return (\n          <div\n            className={className}\n            style={style}\n            onClick={this.onClearErrorHandler()}\n          >\n            {value.map((item, index) => {\n              return (\n                <div className='array-item' key={`${name}.${index}`}>\n                  <div className='array-index'>\n                    <span>{index + 1}</span>\n                  </div>\n                  <div className='array-item-wrapper'>{renderField(index)}</div>\n                  <div className='array-item-operator'>\n                    {this.renderRemove(index, item)}\n                    {this.renderMoveDown(index, item)}\n                    {this.renderMoveUp(index, item)}\n                  </div>\n                </div>\n              )\n            })}\n            {this.renderEmpty()}\n            {value.length > 0 && this.renderAddition()}\n          </div>\n        )\n      }\n    }\n  )`\n    border: 1px solid #eee;\n    min-width: 400px;\n    .array-item {\n      padding: 20px;\n      padding-bottom: 0;\n      padding-top: 30px;\n      border-bottom: 1px solid #eee;\n      position: relative;\n      &:nth-child(even) {\n        background: #fafafa;\n      }\n      .array-index {\n        position: absolute;\n        top: 0;\n        left: 0;\n        display: block;\n        span {\n          position: absolute;\n          color: #fff;\n          z-index: 1;\n          font-size: 12px;\n          top: 3px;\n          left: 3px;\n        }\n        &::after {\n          content: '';\n          display: block;\n          border-top: 20px solid transparent;\n          border-left: 20px solid transparent;\n          border-bottom: 20px solid transparent;\n          border-right: 20px solid #888;\n          transform: rotate(45deg);\n          position: absolute;\n          z-index: 0;\n          top: -20px;\n          left: -20px;\n        }\n      }\n      .array-item-operator {\n        display: flex;\n        border-top: 1px solid #eee;\n        padding-top: 20px;\n      }\n    }\n    .array-empty-wrapper {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      cursor: pointer;\n      &.disabled {\n        cursor: default;\n      }\n      .array-empty {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        margin: 20px;\n        img {\n          display: block;\n          height: 80px;\n        }\n        .next-btn-text {\n          color: #999;\n          .next-icon:before {\n            width: 16px !important;\n            font-size: 16px !important;\n            margin-right: 3px;\n          }\n        }\n      }\n    }\n    .array-item-wrapper {\n      margin: 0 -20px;\n    }\n    .array-item-addition {\n      padding: 10px 20px;\n      background: #fbfbfb;\n      .next-btn-text {\n        color: #888;\n        .next-icon:before {\n          width: 16px !important;\n          font-size: 16px !important;\n          margin-right: 3px;\n        }\n      }\n    }\n  `\n)\n","import React, { Fragment } from 'react'\nimport { registerFormField } from '@uform/react'\nimport { toArr } from '@uform/utils'\nimport { ArrayField } from './array'\nimport Card from '@alifd/next/lib/card'\nimport styled from 'styled-components'\n\nconst FormCardsField = styled(\n  class extends ArrayField {\n    renderOperations(item, index) {\n      return (\n        <Fragment>\n          {this.renderRemove(index, item)}\n          {this.renderMoveDown(index, item)}\n          {this.renderMoveUp(index, item)}\n          {this.renderExtraOperations(index)}\n        </Fragment>\n      )\n    }\n\n    renderEmpty(title) {\n      return (\n        <Card title={title} className='card-list' contentHeight='auto'>\n          {super.renderEmpty()}\n        </Card>\n      )\n    }\n\n    render() {\n      const { value, className, schema, renderField } = this.props\n      const {\n        title,\n        renderAddition,\n        renderRemove,\n        renderEmpty,\n        renderMoveDown,\n        renderMoveUp,\n        renderOperations,\n        ...others\n      } = this.getProps() || {}\n      return (\n        <div className={className} onClick={this.onClearErrorHandler()}>\n          {toArr(value).map((item, index) => {\n            return (\n              <Card\n                {...others}\n                title={\n                  <span>\n                    {index + 1}. {title || schema.title}\n                  </span>\n                }\n                className='card-list'\n                key={index}\n                contentHeight='auto'\n                extra={this.renderOperations(item, index)}\n              >\n                {renderField(index)}\n              </Card>\n            )\n          })}\n          {value.length === 0 && this.renderEmpty(title)}\n          <div className='addition-wrapper'>\n            {value.length > 0 && this.renderAddition()}\n          </div>\n        </div>\n      )\n    }\n  }\n)`\n  .next-card-body {\n    padding-top: 30px;\n    padding-bottom: 0 !important;\n  }\n  .next-card-head-main {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  .next-card {\n    display: block;\n    margin-bottom: 0px;\n    background: #fff;\n    .array-empty-wrapper {\n      display: flex;\n      justify-content: center;\n      cursor: pointer;\n      margin-bottom: 0px;\n      &.disabled {\n        cursor: default;\n      }\n      .array-empty {\n        display: flex;\n        flex-direction: column;\n        margin-bottom: 20px;\n        img {\n          margin-bottom: 16px;\n          height: 85px;\n        }\n        .next-btn-text {\n          color: #888;\n        }\n        .next-icon:before {\n          width: 16px !important;\n          font-size: 16px !important;\n          margin-right: 5px;\n        }\n      }\n    }\n\n    .next-card {\n      box-shadow: none;\n    }\n    .card-list {\n      box-shadow: none;\n      border: 1px solid #eee;\n    }\n\n    .array-item-addition {\n      box-shadow: none;\n      border: 1px solid #eee;\n      transition: all 0.35s ease-in-out;\n      &:hover {\n        border: 1px solid #ccc;\n      }\n    }\n  }\n  .next-card.card-list {\n    margin-top: 20px;\n  }\n\n  .addition-wrapper .array-item-addition {\n    margin-top: 20px;\n    margin-bottom: 3px;\n  }\n  .cricle-btn {\n    margin-bottom: 0;\n  }\n  .next-card-extra {\n    display: flex;\n  }\n  .array-item-addition {\n    background: #fff;\n    display: flex;\n    cursor: pointer;\n    padding: 10px 0;\n    justify-content: center;\n    box-shadow: 1px 1px 4px 0 rgba(0, 0, 0, 0.1);\n    .next-btn-text {\n      color: #888;\n    }\n    .next-icon:before {\n      width: 16px !important;\n      font-size: 16px !important;\n      margin-right: 5px;\n    }\n  }\n  .card-list:first-child {\n    margin-top: 0 !important;\n  }\n`\n\nregisterFormField('cards', FormCardsField)\n","import React, { Component } from 'react'\nimport { registerFormField } from '@uform/react'\nimport { isFn, toArr } from '@uform/utils'\nimport { ArrayField } from './array'\nimport styled from 'styled-components'\n\n/**\n * 轻量级Table，用next table实在太重了\n **/\nconst Table = styled(\n  class Table extends Component {\n    renderCell({ record, col, rowIndex, colIndex }) {\n      return (\n        <div className='next-table-cell-wrapper'>\n          {isFn(col.cell)\n            ? col.cell(\n              record ? record[col.dataIndex] : undefined,\n              rowIndex,\n              record\n            )\n            : record\n              ? record[col.dataIndex]\n              : undefined}\n        </div>\n      )\n    }\n\n    renderTable(columns, dataSource) {\n      return (\n        <div className='next-table-body'>\n          <table>\n            <colgroup>\n              {columns.map((col, index) => {\n                return <col key={index} style={{ width: col.width }} />\n              })}\n            </colgroup>\n            <thead>\n              <tr>\n                {columns.map((col, index) => {\n                  return (\n                    <th key={index} className='next-table-header-node'>\n                      <div className='next-table-cell-wrapper'>{col.title}</div>\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n            <tbody>\n              {dataSource.map((record, rowIndex) => {\n                return (\n                  <tr key={rowIndex} className='next-table-row'>\n                    {columns.map((col, colIndex) => {\n                      return (\n                        <td key={colIndex} className='next-table-cell'>\n                          {this.renderCell({\n                            record,\n                            col,\n                            rowIndex,\n                            colIndex\n                          })}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n              {this.renderPlacehodler(dataSource, columns)}\n            </tbody>\n          </table>\n        </div>\n      )\n    }\n\n    renderPlacehodler(dataSource, columns) {\n      if (dataSource.length === 0) {\n        return (\n          <tr className='next-table-row'>\n            <td className='next-table-cell' colSpan={columns.length}>\n              <div className='next-table-empty' style={{ padding: 10 }}>\n                <img\n                  src='//img.alicdn.com/tfs/TB1cVncKAzoK1RjSZFlXXai4VXa-184-152.svg'\n                  style={{ height: 60 }}\n                />\n              </div>\n            </td>\n          </tr>\n        )\n      }\n    }\n\n    getColumns(children) {\n      const columns = []\n      React.Children.forEach(children, child => {\n        if (React.isValidElement(child)) {\n          if (\n            child.type === Column ||\n            child.type.displayName === '@schema-table-column'\n          ) {\n            columns.push(child.props)\n          }\n        }\n      })\n\n      return columns\n    }\n\n    render() {\n      const columns = this.getColumns(this.props.children)\n      const dataSource = toArr(this.props.dataSource)\n      return (\n        <div className={this.props.className}>\n          <div className='next-table zebra'>\n            <div className='next-table-inner'>\n              {this.renderTable(columns, dataSource)}\n            </div>\n          </div>\n        </div>\n      )\n    }\n  }\n)`\n  .next-table {\n    position: relative;\n  }\n\n  .next-table,\n  .next-table *,\n  .next-table :after,\n  .next-table :before {\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n  }\n\n  .next-table table {\n    border-collapse: collapse;\n    border-spacing: 0;\n    width: 100%;\n    background: #fff;\n    display: table !important;\n    margin: 0 !important;\n  }\n\n  .next-table table tr:first-child td {\n    border-top-width: 0;\n  }\n\n  .next-table th {\n    padding: 0;\n    background: #ebecf0;\n    color: #333;\n    text-align: left;\n    font-weight: 400;\n    min-width: 200px;\n    border: 1px solid #dcdee3;\n  }\n\n  .next-table th .next-table-cell-wrapper {\n    padding: 12px 16px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    word-break: break-all;\n  }\n\n  .next-table td {\n    padding: 0;\n    border: 1px solid #dcdee3;\n  }\n\n  .next-table td .next-table-cell-wrapper {\n    padding: 12px 16px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    word-break: break-all;\n    display: flex;\n  }\n\n  .next-table.zebra tr:nth-child(odd) td {\n    background: #fff;\n  }\n\n  .next-table.zebra tr:nth-child(2n) td {\n    background: #f7f8fa;\n  }\n\n  .next-table-empty {\n    color: #a0a2ad;\n    padding: 32px 0;\n    text-align: center;\n  }\n\n  .next-table-row {\n    -webkit-transition: all 0.3s ease;\n    transition: all 0.3s ease;\n    background: #fff;\n    color: #333;\n    border: none !important;\n  }\n\n  .next-table-row.hidden {\n    display: none;\n  }\n\n  .next-table-row.hovered,\n  .next-table-row.selected {\n    background: #f2f3f7;\n    color: #333;\n  }\n\n  .next-table-body,\n  .next-table-header {\n    overflow: auto;\n    font-size: 12px;\n  }\n\n  .next-table-body {\n    font-size: 12px;\n  }\n`\n\nclass Column extends Component {\n  static displayName = '@schema-table-column'\n  render() {\n    return this.props.children\n  }\n}\n\nregisterFormField(\n  'table',\n  styled(\n    class extends ArrayField {\n      createFilter(key, payload) {\n        const { schema } = this.props\n        const columnFilter = schema['x-props'] && schema['x-props'].columnFilter\n        return (render, otherwise) => {\n          if (isFn(columnFilter)) {\n            return columnFilter(key, payload)\n              ? isFn(render)\n                ? render()\n                : render\n              : isFn(otherwise)\n                ? otherwise()\n                : otherwise\n          } else {\n            return render()\n          }\n        }\n      }\n\n      render() {\n        const { value, schema, locale, className, renderField } = this.props\n        const style = schema['x-props'] && schema['x-props'].style\n        const additionFilter = this.createFilter('addition', schema)\n        return (\n          <div\n            className={className}\n            style={style}\n            onClick={this.onClearErrorHandler()}\n          >\n            <div>\n              <Table dataSource={value}>\n                {Object.keys(\n                  (schema.items && schema.items.properties) || {}\n                ).reduce((buf, key) => {\n                  const itemSchema = schema.items.properties[key]\n                  const filter = this.createFilter(key, itemSchema)\n                  const res = filter(\n                    () => {\n                      return buf.concat(\n                        <Column\n                          {...itemSchema}\n                          key={key}\n                          title={itemSchema.title}\n                          dataIndex={key}\n                          cell={(record, index) => {\n                            return renderField([index, key])\n                          }}\n                        />\n                      )\n                    },\n                    () => {\n                      return buf\n                    }\n                  )\n                  return res\n                }, [])}\n                {additionFilter(() => {\n                  return (\n                    <Column\n                      key='operations'\n                      title={locale.operations}\n                      dataIndex='operations'\n                      width={180}\n                      cell={(item, index) => {\n                        return (\n                          <div className='array-item-operator'>\n                            {this.renderRemove(index, item)}\n                            {this.renderMoveDown(index, item)}\n                            {this.renderMoveUp(index, item)}\n                          </div>\n                        )\n                      }}\n                    />\n                  )\n                })}\n              </Table>\n              {this.renderAddition()}\n            </div>\n          </div>\n        )\n      }\n    }\n  )`\n    display: inline-block;\n    .array-item-addition {\n      padding: 10px;\n      background: #fbfbfb;\n      border-left: 1px solid #dcdee3;\n      border-right: 1px solid #dcdee3;\n      border-bottom: 1px solid #dcdee3;\n      .next-btn-text {\n        color: #888;\n      }\n      .next-icon:before {\n        width: 16px !important;\n        font-size: 16px !important;\n        margin-right: 5px;\n      }\n    }\n\n    .next-table-cell-wrapper>.next-form-item{\n      margin-bottom:0;\n    }\n    .array-item-operator {\n      display: flex;\n      margin-bottom:15px;\n    }\n  `\n)\n","import React from 'react'\nimport { connect, registerFormField } from '@uform/react'\nimport { Input } from '@alifd/next'\nimport styled from 'styled-components'\n\nvar isNum = function(c) {\n  return c >= 48 && c <= 57\n}\nvar isLower = function(c) {\n  return c >= 97 && c <= 122\n}\nvar isUpper = function(c) {\n  return c >= 65 && c <= 90\n}\nvar isSymbol = function(c) {\n  return !(isLower(c) || isUpper(c) || isNum(c))\n}\nvar isLetter = function(c) {\n  return isLower(c) || isUpper(c)\n}\n\nconst getStrength = val => {\n  if (!val) return 0\n  let num = 0\n  let lower = 0\n  let upper = 0\n  let symbol = 0\n  let MNS = 0\n  let rep = 0\n  let repC = 0\n  let consecutive = 0\n  let sequential = 0\n  const len = () => num + lower + upper + symbol\n  const callme = () => {\n    var re = num > 0 ? 1 : 0\n    re += lower > 0 ? 1 : 0\n    re += upper > 0 ? 1 : 0\n    re += symbol > 0 ? 1 : 0\n    if (re > 2 && len() >= 8) {\n      return re + 1\n    } else {\n      return 0\n    }\n  }\n  for (var i = 0; i < val.length; i++) {\n    var c = val.charCodeAt(i)\n    if (isNum(c)) {\n      num++\n      if (i !== 0 && i !== val.length - 1) {\n        MNS++\n      }\n      if (i > 0 && isNum(val.charCodeAt(i - 1))) {\n        consecutive++\n      }\n    } else if (isLower(c)) {\n      lower++\n      if (i > 0 && isLower(val.charCodeAt(i - 1))) {\n        consecutive++\n      }\n    } else if (isUpper(c)) {\n      upper++\n      if (i > 0 && isUpper(val.charCodeAt(i - 1))) {\n        consecutive++\n      }\n    } else {\n      symbol++\n      if (i !== 0 && i !== val.length - 1) {\n        MNS++\n      }\n    }\n    var exists = false\n    for (var j = 0; j < val.length; j++) {\n      if (val[i] === val[j] && i !== j) {\n        exists = true\n        repC += Math.abs(val.length / (j - i))\n      }\n    }\n    if (exists) {\n      rep++\n      var unique = val.length - rep\n      repC = unique ? Math.ceil(repC / unique) : Math.ceil(repC)\n    }\n    if (i > 1) {\n      var last1 = val.charCodeAt(i - 1)\n      var last2 = val.charCodeAt(i - 2)\n      if (isLetter(c)) {\n        if (isLetter(last1) && isLetter(last2)) {\n          var v = val.toLowerCase()\n          var vi = v.charCodeAt(i)\n          var vi1 = v.charCodeAt(i - 1)\n          var vi2 = v.charCodeAt(i - 2)\n          if (vi - vi1 === vi1 - vi2 && Math.abs(vi - vi1) === 1) {\n            sequential++\n          }\n        }\n      } else if (isNum(c)) {\n        if (isNum(last1) && isNum(last2)) {\n          if (c - last1 === last1 - last2 && Math.abs(c - last1) === 1) {\n            sequential++\n          }\n        }\n      } else {\n        if (isSymbol(last1) && isSymbol(last2)) {\n          if (c - last1 === last1 - last2 && Math.abs(c - last1) === 1) {\n            sequential++\n          }\n        }\n      }\n    }\n  }\n  let sum = 0\n  let length = len()\n  sum += 4 * length\n  if (lower > 0) {\n    sum += 2 * (length - lower)\n  }\n  if (upper > 0) {\n    sum += 2 * (length - upper)\n  }\n  if (num !== length) {\n    sum += 4 * num\n  }\n  sum += 6 * symbol\n  sum += 2 * MNS\n  sum += 2 * callme()\n  if (length === lower + upper) {\n    sum -= length\n  }\n  if (length === num) {\n    sum -= num\n  }\n  sum -= repC\n  sum -= 2 * consecutive\n  sum -= 3 * sequential\n  sum = sum < 0 ? 0 : sum\n  sum = sum > 100 ? 100 : sum\n\n  if (sum >= 80) {\n    return 100\n  } else if (sum >= 60) {\n    return 80\n  } else if (sum >= 40) {\n    return 60\n  } else if (sum >= 20) {\n    return 40\n  } else {\n    return 20\n  }\n}\n\nconst Password = styled(\n  class Password extends React.Component {\n    state = {\n      value: this.props.value || this.props.defaultValue,\n      strength: 0,\n      eye: false\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      if (\n        prevProps.value !== this.props.value &&\n        this.props.value !== this.state.value\n      ) {\n        this.setState({\n          value: this.props.value,\n          strength: getStrength(this.props.value)\n        })\n      }\n    }\n\n    onChangeHandler = value => {\n      this.setState(\n        {\n          value,\n          strength: getStrength(value)\n        },\n        () => {\n          if (this.props.onChange) {\n            this.props.onChange(value)\n          }\n        }\n      )\n    }\n\n    renderStrength() {\n      const { strength } = this.state\n      return (\n        <div className='password-strength-wrapper'>\n          <div className='div-1 div' />\n          <div className='div-2 div' />\n          <div className='div-3 div' />\n          <div className='div-4 div' />\n          <div\n            className='password-strength-bar'\n            style={{\n              clipPath: `polygon(0 0,${strength}% 0,${strength}% 100%,0 100%)`\n            }}\n          />\n        </div>\n      )\n    }\n\n    switchEye() {\n      return () => {\n        this.setState({\n          eye: !this.state.eye\n        })\n      }\n    }\n\n    renderEye() {\n      if (!this.state.eye) {\n        return (\n          <img\n            className='eye'\n            onClick={this.switchEye()}\n            src='//img.alicdn.com/tfs/TB1wyXlsVzqK1RjSZFvXXcB7VXa-200-200.svg'\n          />\n        )\n      } else {\n        return (\n          <img\n            className='eye'\n            onClick={this.switchEye()}\n            src='//img.alicdn.com/tfs/TB1xiXlsVzqK1RjSZFvXXcB7VXa-200-200.svg'\n          />\n        )\n      }\n    }\n\n    render() {\n      const {\n        className,\n        checkStrength,\n        value,\n        onChange,\n        htmlType,\n        innerAfter,\n        ...others\n      } = this.props\n      return (\n        <div className={className}>\n          <Input\n            htmlType={this.state.eye ? 'text' : 'password'}\n            className={`input-${this.state.eye ? 'text' : 'password'}`}\n            value={this.state.value}\n            onChange={this.onChangeHandler}\n            innerAfter={this.renderEye()}\n            {...others}\n          />\n          {checkStrength && this.renderStrength()}\n        </div>\n      )\n    }\n  }\n)`\n  .next-input {\n    width: 100%;\n    position: relative;\n    &.input-password input {\n      font-size: 16px;\n      letter-spacing: 2px;\n    }\n    input {\n      padding-right: 25px;\n    }\n    .eye {\n      position: absolute;\n      height: 20px;\n      right: 5px;\n      top: 50%;\n      transform: translate(0, -50%);\n      opacity: 0.3;\n      cursor: pointer;\n      transition: all 0.15s ease-in-out;\n      &:hover {\n        opacity: 0.6;\n      }\n    }\n  }\n  .password-strength-wrapper {\n    background: #e0e0e0;\n    margin-bottom: 3px;\n    position: relative;\n    .div {\n      position: absolute;\n      z-index: 1;\n      height: 8px;\n      top: 0;\n      background: #fff;\n      width: 1px;\n      transform: translate(-50%, 0);\n    }\n    .div-1 {\n      left: 20%;\n    }\n    .div-2 {\n      left: 40%;\n    }\n    .div-3 {\n      left: 60%;\n    }\n    .div-4 {\n      left: 80%;\n    }\n    .password-strength-bar {\n      position: relative;\n      background-image: -webkit-linear-gradient(left, #ff5500, #ff9300);\n      transition: all 0.35s ease-in-out;\n      height: 8px;\n      width: 100%;\n      margin-top: 5px;\n    }\n  }\n`\n\nregisterFormField('password', connect()(Password))\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Row, Col } from '@alifd/next/lib/grid'\nimport { FormConsumer } from '../form'\nimport Sticky from 'react-stikky'\nimport cls from 'classnames'\nimport styled from 'styled-components'\n\nconst getAlign = align => {\n  if (align === 'start' || align === 'end') return align\n  if (align === 'left' || align === 'top') return 'flex-start'\n  if (align === 'right' || align === 'bottom') return 'flex-end'\n  return align\n}\n\nconst isElementInViewport = (rect, { offset = 0, threshold = 0 } = {}) => {\n  const { top, right, bottom, left, width, height } = rect\n  const intersection = {\n    t: bottom,\n    r: window.innerWidth - left,\n    b: window.innerHeight - top,\n    l: right\n  }\n\n  const elementThreshold = {\n    x: threshold * width,\n    y: threshold * height\n  }\n\n  return (\n    intersection.t >= (offset.top || offset + elementThreshold.y) &&\n    intersection.r >= (offset.right || offset + elementThreshold.x) &&\n    intersection.b >= (offset.bottom || offset + elementThreshold.y) &&\n    intersection.l >= (offset.left || offset + elementThreshold.x)\n  )\n}\n\nexport const FormButtonGroup = styled(\n  class FormButtonGroup extends Component {\n    static defaultProps = {\n      span: 24,\n      zIndex: 100\n    }\n\n    renderChildren() {\n      const { children, itemStyle, offset, span } = this.props\n      return (\n        <div className='button-group'>\n          <Row>\n            <Col span={span}>\n              <Col offset={offset} className='inline'>\n                <div className='inline-view' style={itemStyle}>\n                  {children}\n                </div>\n              </Col>\n            </Col>\n          </Row>\n        </div>\n      )\n    }\n\n    getStickyBoundaryHandler(ref) {\n      return () => {\n        this.formNode = this.formNode || ReactDOM.findDOMNode(ref.current)\n        if (this.formNode) {\n          return isElementInViewport(this.formNode.getBoundingClientRect())\n        }\n        return true\n      }\n    }\n\n    render() {\n      const { sticky, style, className } = this.props\n\n      const content = (\n        <FormConsumer>\n          {({ inline } = {}) => (\n            <div\n              className={cls(className, {\n                'is-inline': !!inline\n              })}\n              style={style}\n            >\n              {this.renderChildren()}\n            </div>\n          )}\n        </FormConsumer>\n      )\n\n      if (sticky) {\n        return (\n          <div>\n            <FormConsumer>\n              {({ inline, FormRef } = {}) => {\n                if (!FormRef) return\n                return (\n                  <Sticky\n                    edge='bottom'\n                    triggerDistance={this.props.triggerDistance}\n                    offsetDistance={this.props.offsetDistance}\n                    zIndex={this.props.zIndex}\n                    getStickyBoundary={this.getStickyBoundaryHandler(FormRef)}\n                    style={{\n                      borderTop: '1px solid #eee',\n                      background: (style && style.background) || '#fff',\n                      padding: (style && style.padding) || '8px 0'\n                    }}\n                  >\n                    <div className={className} style={style}>\n                      {content}\n                    </div>\n                  </Sticky>\n                )\n              }}\n            </FormConsumer>\n          </div>\n        )\n      }\n\n      return content\n    }\n  }\n)`\n  ${props =>\n    props.align ? `display:flex;justify-content: ${getAlign(props.align)}` : ''}\n  &.is-inline {\n    display: inline-block;\n    flex-grow: 3;\n  }\n  .button-group {\n    .inline {\n      display: inline-block;\n      .inline-view {\n        & > * {\n          margin-right: 10px;\n          margin-left: 0px;\n          display: inline-block;\n        }\n        & > *:last-child {\n          margin-right: 0 !important;\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { FormConsumer } from '@uform/react'\nimport { Button } from '@alifd/next'\n\nexport const Submit = ({ showLoading, ...props }) => {\n  return (\n    <FormConsumer>\n      {({ status, schema }) => {\n        return (\n          <Button\n            type='primary'\n            htmlType='submit'\n            {...props}\n            loading={props.showLoading ? status === 'submitting' : undefined}\n          >\n            {props.children || '提交'}\n          </Button>\n        )\n      }}\n    </FormConsumer>\n  )\n}\n\nSubmit.defaultProps = {\n  showLoading: true\n}\n\nexport const Reset = props => {\n  return (\n    <FormConsumer>\n      {({ status, reset }) => {\n        return (\n          <Button {...props} onClick={reset}>\n            {props.children || '重置'}\n          </Button>\n        )\n      }}\n    </FormConsumer>\n  )\n}\n","import React, { Component } from 'react'\nimport { createVirtualBox } from '@uform/react'\nimport { toArr } from '@uform/utils'\nimport { Row, Col } from '@alifd/next/lib/grid'\nimport Card from '@alifd/next/lib/card'\nimport { FormConsumer, FormItem, FormProvider } from '../form'\nimport styled from 'styled-components'\nimport cls from 'classnames'\n\nconst normalizeCol = (col, _default = 0) => {\n  if (!col) return _default\n  return typeof col === 'object' ? col : { span: col }\n}\n\nexport const FormLayout = createVirtualBox(\n  'layout',\n  ({ children, ...props }) => {\n    return (\n      <FormConsumer>\n        {value => {\n          let newValue = { ...value, ...props }\n          let child =\n            newValue.inline || newValue.className || newValue.style ? (\n              <div\n                className={cls(newValue.className, {\n                  'next-form next-inline': !!newValue.inline\n                })}\n                style={newValue.style}\n              >\n                {children}\n              </div>\n            ) : (\n              children\n            )\n          return <FormProvider value={newValue}>{child}</FormProvider>\n        }}\n      </FormConsumer>\n    )\n  }\n)\n\nexport const FormItemGrid = createVirtualBox(\n  'grid',\n  class extends Component {\n    renderFormItem(children) {\n      const { title, description, help, name, extra, ...others } = this.props\n      return React.createElement(\n        FormConsumer,\n        {},\n        ({\n          labelAlign,\n          labelTextAlign,\n          labelCol,\n          wrapperCol,\n          size,\n          autoAddColon\n        }) => {\n          return React.createElement(\n            FormItem,\n            {\n              labelAlign,\n              labelTextAlign,\n              labelCol,\n              wrapperCol,\n              autoAddColon,\n              size,\n              ...others,\n              label: title,\n              noMinHeight: true,\n              id: name,\n              extra: description,\n              help\n            },\n            children\n          )\n        }\n      )\n    }\n\n    renderGrid() {\n      let {\n        children,\n        cols,\n        title,\n        description,\n        help,\n        extra,\n        ...props\n      } = this.props\n      children = toArr(children)\n      cols = toArr(cols).map(col => normalizeCol(col))\n      const childNum = children.length\n\n      if (cols.length < childNum) {\n        let offset = childNum - cols.length\n        let lastSpan =\n          24 -\n          cols.reduce((buf, col) => {\n            return (\n              buf +\n              Number(col.span ? col.span : 0) +\n              Number(col.offset ? col.offset : 0)\n            )\n          }, 0)\n        for (let i = 0; i < offset; i++) {\n          cols.push(parseInt(offset / lastSpan))\n        }\n      }\n\n      return (\n        <Row {...props}>\n          {children.reduce((buf, child, key) => {\n            return child\n              ? buf.concat(\n                <Col key={key} {...cols[key]}>\n                  {child}\n                </Col>\n              )\n              : buf\n          }, [])}\n        </Row>\n      )\n    }\n\n    render() {\n      const { title } = this.props\n      if (title) {\n        return this.renderFormItem(this.renderGrid())\n      } else {\n        return this.renderGrid()\n      }\n    }\n  }\n)\n\nexport const FormCard = createVirtualBox(\n  'card',\n  styled(\n    class extends Component {\n      static defaultProps = {\n        contentHeight: 'auto'\n      }\n      render() {\n        const { children, className, ...props } = this.props\n        return (\n          <Card className={className} {...props}>\n            {children}\n          </Card>\n        )\n      }\n    }\n  )`\n    margin-bottom: 30px;\n    .next-card-body {\n      padding-top: 30px;\n      padding-bottom: 0 !important;\n    }\n  `\n)\n\nexport const FormBlock = createVirtualBox(\n  'block',\n  styled(\n    class extends Component {\n      static defaultProps = {\n        contentHeight: 'auto'\n      }\n      render() {\n        const { children, className, ...props } = this.props\n        return (\n          <Card className={className} {...props}>\n            {children}\n          </Card>\n        )\n      }\n    }\n  )`\n    margin-bottom: 0px;\n    .next-card-body {\n      padding-top: 20px;\n      padding-bottom: 0 !important;\n    }\n    &.next-card {\n      border: none;\n      padding: 0 15px;\n      padding-bottom: 15px;\n    }\n  `\n)\n","import './form'\nimport './fields/string'\nimport './fields/number'\nimport './fields/boolean'\nimport './fields/date'\nimport './fields/time'\nimport './fields/range'\nimport './fields/upload'\nimport './fields/checkbox'\nimport './fields/radio'\nimport './fields/rating'\nimport './fields/transfer'\nimport './fields/array'\nimport './fields/cards'\nimport './fields/table'\nimport './fields/password'\nimport { mapStyledProps, mapTextComponent } from './utils'\nimport { SchemaForm } from '@uform/react'\nexport * from '@uform/react'\nexport * from './components/formButtonGroup'\nexport * from './components/button'\nexport * from './components/layout'\nexport { mapStyledProps, mapTextComponent }\nexport default SchemaForm\n","/*!\n * MoveTo - A lightweight scroll animation javascript library without any dependency.\n * Version 1.8.0 (14-01-2019 13:15)\n * Licensed under MIT\n * Copyright 2019 Hasan Aydoğdu <hsnaydd@gmail.com>\n */\n\n'use strict';\nvar MoveTo = function () {\n  /**\n                           * Defaults\n                           * @type {object}\n                           */\n  var defaults = {\n    tolerance: 0,\n    duration: 800,\n    easing: 'easeOutQuart',\n    container: window,\n    callback: function callback() {} };\n\n\n  /**\n                                         * easeOutQuart Easing Function\n                                         * @param  {number} t - current time\n                                         * @param  {number} b - start value\n                                         * @param  {number} c - change in value\n                                         * @param  {number} d - duration\n                                         * @return {number} - calculated value\n                                         */\n  function easeOutQuart(t, b, c, d) {\n    t /= d;\n    t--;\n    return -c * (t * t * t * t - 1) + b;\n  }\n\n  /**\n     * Merge two object\n     *\n     * @param  {object} obj1\n     * @param  {object} obj2\n     * @return {object} merged object\n     */\n  function mergeObject(obj1, obj2) {\n    var obj3 = {};\n    Object.keys(obj1).forEach(function (propertyName) {\n      obj3[propertyName] = obj1[propertyName];\n    });\n\n    Object.keys(obj2).forEach(function (propertyName) {\n      obj3[propertyName] = obj2[propertyName];\n    });\n    return obj3;\n  };\n\n  /**\n      * Converts camel case to kebab case\n      * @param  {string} val the value to be converted\n      * @return {string} the converted value\n      */\n  function kebabCase(val) {\n    return val.replace(/([A-Z])/g, function ($1) {\n      return '-' + $1.toLowerCase();\n    });\n  };\n\n  /**\n      * Count a number of item scrolled top\n      * @param  {Window|HTMLElement} container\n      * @return {number}\n      */\n  function countScrollTop(container) {\n    if (container instanceof HTMLElement) {\n      return container.scrollTop;\n    }\n    return container.pageYOffset;\n  };\n\n  /**\n      * MoveTo Constructor\n      * @param {object} options Options\n      * @param {object} easeFunctions Custom ease functions\n      */\n  function MoveTo() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var easeFunctions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.options = mergeObject(defaults, options);\n    this.easeFunctions = mergeObject({ easeOutQuart: easeOutQuart }, easeFunctions);\n  }\n\n  /**\n     * Register a dom element as trigger\n     * @param  {HTMLElement} dom Dom trigger element\n     * @param  {function} callback Callback function\n     * @return {function|void} unregister function\n     */\n  MoveTo.prototype.registerTrigger = function (dom, callback) {var _this = this;\n    if (!dom) {\n      return;\n    }\n\n    var href = dom.getAttribute('href') || dom.getAttribute('data-target');\n    // The element to be scrolled\n    var target = href && href !== '#' ?\n    document.getElementById(href.substring(1)) :\n    document.body;\n    var options = mergeObject(this.options, _getOptionsFromTriggerDom(dom, this.options));\n\n    if (typeof callback === 'function') {\n      options.callback = callback;\n    }\n\n    var listener = function listener(e) {\n      e.preventDefault();\n      _this.move(target, options);\n    };\n\n    dom.addEventListener('click', listener, false);\n\n    return function () {return dom.removeEventListener('click', listener, false);};\n  };\n\n  /**\n      * Move\n      * Scrolls to given element by using easeOutQuart function\n      * @param  {HTMLElement|number} target Target element to be scrolled or target position\n      * @param  {object} options Custom options\n      */\n  MoveTo.prototype.move = function (target) {var _this2 = this;var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (target !== 0 && !target) {\n      return;\n    }\n\n    options = mergeObject(this.options, options);\n\n    var distance = typeof target === 'number' ? target : target.getBoundingClientRect().top;\n    var from = countScrollTop(options.container);\n    var startTime = null;\n    var lastYOffset = void 0;\n    distance -= options.tolerance;\n\n    // rAF loop\n    var loop = function loop(currentTime) {\n      var currentYOffset = countScrollTop(_this2.options.container);\n\n      if (!startTime) {\n        // To starts time from 1, we subtracted 1 from current time\n        // If time starts from 1 The first loop will not do anything,\n        // because easing value will be zero\n        startTime = currentTime - 1;\n      }\n\n      var timeElapsed = currentTime - startTime;\n\n      if (lastYOffset) {\n        if (\n        distance > 0 && lastYOffset > currentYOffset ||\n        distance < 0 && lastYOffset < currentYOffset)\n        {\n          return options.callback(target);\n        }\n      }\n      lastYOffset = currentYOffset;\n\n      var val = _this2.easeFunctions[options.easing](timeElapsed, from, distance, options.duration);\n\n      options.container.scroll(0, val);\n\n      if (timeElapsed < options.duration) {\n        window.requestAnimationFrame(loop);\n      } else {\n        options.container.scroll(0, distance + from);\n        options.callback(target);\n      }\n    };\n\n    window.requestAnimationFrame(loop);\n  };\n\n  /**\n      * Adds custom ease function\n      * @param {string}   name Ease function name\n      * @param {function} fn   Ease function\n      */\n  MoveTo.prototype.addEaseFunction = function (name, fn) {\n    this.easeFunctions[name] = fn;\n  };\n\n  /**\n      * Returns options which created from trigger dom element\n      * @param  {HTMLElement} dom Trigger dom element\n      * @param  {object} options The instance's options\n      * @return {object} The options which created from trigger dom element\n      */\n  function _getOptionsFromTriggerDom(dom, options) {\n    var domOptions = {};\n\n    Object.keys(options).forEach(function (key) {\n      var value = dom.getAttribute('data-mt-' + kebabCase(key));\n      if (value) {\n        domOptions[key] = isNaN(value) ? value : parseInt(value, 10);\n      }\n    });\n    return domOptions;\n  }\n\n  return MoveTo;\n}();\n\nif (typeof module !== 'undefined') {\n  module.exports = MoveTo;\n} else {\n  window.MoveTo = MoveTo;\n}"],"mappings":"AAEA;;;;;;;;;;;ACKA;;;;;;;;;;;;;;;;;;;;;;;;ACqEA;;;;;;;;;;;;;;AChCA;;;;;;;;;;;;;;;;;;;;;AC6KA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;ACjQA;;AAMA;AACA;;;;;;;AAOA;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC0DA;;;;;;;;;;;;;;;;;;;;;;;;;ACtNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuTA;ACjMA;;;;;;;;;;;;;;;;;;;;ACvHA;;;;;;AC4JA;;;;;;;;;;;AChKA;;;;;;ACQA","sourceRoot":""}