{"version":3,"file":"bundle.28.js","sources":["webpack:///./docs/API/Field_React.md"],"sourcesContent":["\"use strict\";\n\nvar React = require('/Users/wangzhili/uform/node_modules/_react@16.8.6@react/index.js');\n\nvar ReactDOM = require('/Users/wangzhili/uform/node_modules/_react-dom@16.8.6@react-dom/index.js');\n\nvar ReactCodeSnippet = require('/Users/wangzhili/uform/node_modules/_react-code-snippet@0.6.12@react-code-snippet/lib/index.js');\n\nvar ReactPropsTable = require('/Users/wangzhili/uform/node_modules/_react-props-table@0.1.3@react-props-table/lib/index.js');\n\nvar __DEFINE__ = function __DEFINE__(fn) {\n  var module = {\n    exports: {}\n  };\n  fn(module, module.exports);\n  var component = module.exports.__esModule && module.exports['default'] || module.exports;\n  return typeof component === 'function' ? component : function () {\n    return React.createElement('div', {}, 'Code snippet should export a component!');\n  };\n};\n\nvar __MARKDOWN__ = function __MARKDOWN__() {\n  return React.createElement(React.Fragment, {}, React.createElement(\"h1\", {\n    id: \"field\",\n    className: \"react-demo-h1\"\n  }, \"Field\"), React.createElement(\"h2\", {\n    id: \"介绍\",\n    className: \"react-demo-h2\"\n  }, \"介绍\"), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"Rs UForm的核心组件，用于描述表单字段\"), React.createElement(\"h2\", {\n    id: \"依赖\",\n    className: \"react-demo-h2\"\n  }, \"依赖\"), React.createElement(ReactCodeSnippet, {\n    code: \"import {Field} from '@uform/react'\\n\",\n    justCode: true,\n    lang: \"javascript\"\n  }), React.createElement(\"h2\", {\n    id: \"api\",\n    className: \"react-demo-h2\"\n  }, \"API\"), React.createElement(\"table\", {\n    className: \"react-demo-table\"\n  }, React.createElement(\"thead\", {\n    className: \"react-demo-thead\"\n  }, React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"th\", {\n    align: null,\n    className: \"react-demo-th\"\n  }, \"属性名称\"), React.createElement(\"th\", {\n    align: null,\n    className: \"react-demo-th\"\n  }, \"属性描述\"), React.createElement(\"th\", {\n    align: null,\n    className: \"react-demo-th\"\n  }, \"属性类型\"), React.createElement(\"th\", {\n    align: null,\n    className: \"react-demo-th\"\n  }, \"默认值\"))), React.createElement(\"tbody\", {\n    className: \"react-demo-tbody\"\n  }, React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"type\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"字段类型\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"name\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"字段名称\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"{}\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"default\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"默认值\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"any\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"enum\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"枚举值，配置该值在默认情况下会显示Select形态，指定x-component会显示对应的组件形态\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Array\", React.createElement(\"div\", {\n    className: \"react-demo-div\"\n  }, React.createElement(\"any\", {\n    className: \"react-demo-any\"\n  }))), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"[]\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"maxItems\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"最大条目数\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Number\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"minItems\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"最小条目数\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Number\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"required\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"字段是否必填\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Boolean\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"false\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"x-props\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"字段UI组件属性\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"{}\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"x-rules\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"字段校验规则\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Array<String\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"x-component\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"字段UI组件\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"{type:\\\"object\\\",properties:{}}\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"x-index\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"字段索引顺序\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Number\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"x-render\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"字段渲染函数\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Function(fieldProps : FieldRenderProps){}\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"x-effect\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"副作用事件绑定对象\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Function(dispatch : Function) : {\", React.createElement(\"div\", {\n    className: \"react-demo-div\"\n  }, React.createElement(\"br\", {\n    className: \"react-demo-br\"\n  })), React.createElement(\"a\", {\n    href: \"...arguemtns\",\n    className: \"react-demo-a\"\n  }, \"eventName\"), React.createElement(\"div\", {\n    className: \"react-demo-div\"\n  }, React.createElement(\"br\", {\n    className: \"react-demo-br\"\n  })), \"}\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"x-props.editable\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"字段是否可编辑\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Boolean\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"true\")))), React.createElement(\"h2\", {\n    id: \"x-rules详解\",\n    className: \"react-demo-h2\"\n  }, \"x-rules详解\"), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"校验规则，在uform中有几种校验形态：\"), React.createElement(\"ul\", {\n    className: \"react-demo-ul\"\n  }, React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"字符串正则校验，在x-rules中可以通过传字符串或者字符串数组来描述，下面是正则匹配模式\"), React.createElement(\"ul\", {\n    className: \"react-demo-ul\"\n  }, React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"url 匹配url路径\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"email 匹配邮箱\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"ipv6 匹配ipv6格式\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"ipv4 匹配ipv4格式\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"number 匹配number格式\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"integer 匹配整型格式\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"qq 匹配qq格式\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"phone 匹配手机号码\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"idcard 匹配大陆身份证号码\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"taodomain 匹配淘系域名\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"money 匹配货币格式\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"zh 匹配中文字符串\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"date 匹配日期格式\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"zip 匹配邮编\")))), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"自定义正则匹配，在x-rules中必须以对象或者数组对象的形式来描述，比如\", React.createElement(\"code\", {\n    className: \"react-demo-code\"\n  }, \"{pattern:/\\\\d+/,message:\\\"\\\"该字段必须为数字}\"))), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"必填型校验，在x-rules中必须以对象或者数组对象的形式来描述，比如\", React.createElement(\"code\", {\n    className: \"react-demo-code\"\n  }, \"{required:true,message:\\\"该字段必填\\\"}\"), \",message是选填字段，因为默认错误提示文案里已经有了\")), React.createElement(\"li\", {\n    className: \"react-demo-li\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"自定义校验，在x-rules中可以通过传函数来描述，下面是该函数的类型描述\"))), React.createElement(ReactCodeSnippet, {\n    code: \"type RuleCallback(\\n  value : any,\\n  rule : Object,\\n  values : Object,\\n  name : String) : String | Promise\\n\\n该回调函数直接return错误文案字符串代表响应错误，如果返回Promise对象，\\n代表是异步校验，resolve错误文案的时候代表错误响应，resolve为空的时候代表正确响应\\n\",\n    justCode: true,\n    lang: \"typescript\"\n  }), React.createElement(\"h2\", {\n    id: \"x-render详解\",\n    className: \"react-demo-h2\"\n  }, \"x-render详解\"), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"上面API List中可以看到x-render函数会接收FieldRenderProps类型的参数，下面是它的具体描述\"), React.createElement(ReactCodeSnippet, {\n    code: \"type FieldRenderProps {\\n   name                : String,//字段数据路径\\n   path                : Array<String>,//字段数组数据路径\\n   value               : any,//字段值\\n   errors              : Array<String>,//字段错误消息集合\\n   editable            : Boolean | Function,//字段是否可编辑\\n   locale              : Object,//国际化文案对象\\n   loading             : Boolean,//是否处于加载态\\n   schemaPath          : Array<String>,//schema path,考虑到有些schema其实是不占数据路径的，所以这个路径是真实路径\\n   getSchema(path) : Object, //根据路径获取schema\\n   renderField(childKey : String,reactKey : String | Number) : ReactElement,//根据childKey渲染当前字段的子字段\\n   renderComponent(props : Object) : ReactElement,//渲染当前字段的组件，对于x-render来说，可以借助它快速实现渲染包装功能\\n   getOrderProperties() : Array<Object>,//根据properties里字段的x-index值求出排序后的properties\\n   mutators            : Mutators,//数据操作对象\\n   schema              : Object   \\n}\\n\\ntype Mutators {\\n   change(value : any),//改变当前字段值\\n   dispatch(name : String,payload : any),//触发effect事件\\n   errors(errors : String | Array<String>,[...formatValue : String | Number]),//设置当前字段的错误消息\\n   push(value : any),//对当前字段的值做push操作\\n   pop(),//对当前字段的值做pop操作\\n   insert(index : Number,value : any),//对当前字段的值做insert操作\\n   remove(name : any),//对当前字段的值做remove操作\\n   unshift(value : any),//对当前字段值做unshift操作\\n   shift(),//对当前字段值做shift操作\\n   move(fromIndex : Number, toIndex : Number)//对当前字段值做move操作\\n}\\n\",\n    justCode: true,\n    lang: \"typescript\"\n  }), React.createElement(\"h2\", {\n    id: \"x-effect详解\",\n    className: \"react-demo-h2\"\n  }, \"x-effect详解\"), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"x-effect属于一个非常高级的API，它是为了解决在某些场景，我们的数据联动不是基于字段的onChange事件来做的联动或者依赖onChange事件的其他参数来做的联动，它的解决方案是将dispatch函数给x-effect函数，然后让x-effect函数返回对应的事件处理器，然后再传递给具体的组件，比如：\"), React.createElement(ReactCodeSnippet, {\n    code: \"import {declareFormActions} from '@uform/react'\\n\\nconst actions = declareFormActions()\\n\\n<SchemaForm effects={($)=>{\\n   $('selectOptions','aa')\\n    .subscribe(({payload:options})=>{\\n      actions.setFieldState('bb',state=>{\\n         state.enum = options.extra\\n      })\\n    })\\n }}>\\n    <Field \\n      type=\\\"string\\\" \\n      name=\\\"aa\\\"\\n      enum={[\\n        {label:\\\"111\\\",value:\\\"111\\\",extra:[\\\"111\\\",\\\"222\\\",\\\"333\\\"]},\\n        {label:\\\"222\\\",value:\\\"222\\\",extra:[\\\"111\\\",\\\"222\\\",\\\"333\\\"]},\\n        {label:\\\"333\\\",value:\\\"333\\\",extra:[\\\"111\\\",\\\"222\\\",\\\"333\\\"]}\\n      ]}\\n      x-effect={dispatch=>{\\n        return {\\n          onChange(value,options){\\n             dispatch(\\\"selectOptions\\\",options)\\n          }\\n        }\\n      }}\\n    />\\n    <Field type=\\\"string\\\" name=\\\"bb\\\" enum={[]}/>\\n</SchemaForm>\\n\\n这个例子很简单的实现了aa字段的下拉列表中的额外参数赋值到bb的枚举值中，实现了非常规onChange的值联动\\n\",\n    justCode: true,\n    lang: \"javascript\"\n  }), React.createElement(\"h2\", {\n    id: \"用例\",\n    className: \"react-demo-h2\"\n  }, \"用例\"), React.createElement(ReactCodeSnippet, {\n    code: \"import React, { Component } from 'react'\\nimport ReactDOM from 'react-dom'\\nimport SchemaForm, {\\n  registerFormField,\\n  Field,  \\n  connect\\n} from '@uform/react'\\n\\nregisterFormField(\\n  'string',\\n  connect()(props => <input {...props} value={props.value || ''} />)\\n)\\n\\nReactDOM.render(\\n   <SchemaForm defaultValue={{aa:'123'}} onSubmit={values=>console.log(values)}>\\n     <Field name=\\\"aa\\\" type=\\\"string\\\"/>\\n     <button htmlType=\\\"submit\\\">提交</button>\\n   </SchemaForm>\\n,document.getElementById('root'))\\n\",\n    justCode: true,\n    lang: \"javascript\"\n  }));\n};\n\n__MARKDOWN__.meta = {\n  \"username\": \"zhili.wzl\",\n  \"email\": \"wangzhili56@126.com\"\n};\nmodule.exports = __MARKDOWN__;"],"mappings":"AAEA","sourceRoot":""}