{"version":3,"file":"statics/bundle.46.9b9f944978ce9fd2e786.js","sources":["webpack:///./docs/Tutorials/FormSchema扩展规范.md"],"sourcesContent":["\"use strict\";\n\nvar React = require('/Users/wangzhili/uform/node_modules/_react@16.8.6@react/index.js');\n\nvar ReactDOM = require('/Users/wangzhili/uform/node_modules/_react-dom@16.8.6@react-dom/index.js');\n\nvar ReactCodeSnippet = require('/Users/wangzhili/uform/node_modules/_react-code-snippet@0.6.12@react-code-snippet/lib/index.js');\n\nvar ReactPropsTable = require('/Users/wangzhili/uform/node_modules/_react-props-table@0.1.3@react-props-table/lib/index.js');\n\nvar __DEFINE__ = function __DEFINE__(fn) {\n  var module = {\n    exports: {}\n  };\n  fn(module, module.exports);\n  var component = module.exports.__esModule && module.exports['default'] || module.exports;\n  return typeof component === 'function' ? component : function () {\n    return React.createElement('div', {}, 'Code snippet should export a component!');\n  };\n};\n\nvar __MARKDOWN__ = function __MARKDOWN__() {\n  return React.createElement(React.Fragment, {}, React.createElement(\"h1\", {\n    id: \"form-schema扩展规范\",\n    className: \"react-demo-h1\"\n  }, \"Form Schema扩展规范\"), React.createElement(\"h2\", {\n    id: \"背景\",\n    className: \"react-demo-h2\"\n  }, \"背景\"), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"虽然JSON Schema是可以轻松描述数据结构，但是，原生标准规范却不支持UI相关的描述，所以，我们只能通过扩展json schema来做UI描述\"), React.createElement(\"h2\", {\n    id: \"ui组件描述\",\n    className: \"react-demo-h2\"\n  }, \"UI组件描述\"), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"为了描述具体UI组件，虽然我们有了基本数据类型(string/number/boolean/object/array/date)，但是对于一些扩展组件还是需要一些特殊属性来描述，而且也有可能存在同一种数据类型，但UI展示却是不一样的情况，所以，对于UI组件描述，我们使用了 \", React.createElement(\"strong\", {\n    className: \"react-demo-strong\"\n  }, \"x-component\"), \" 属性来指定对应的UI组件\"), React.createElement(ReactCodeSnippet, {\n    code: \"{\\n  type:\\\"string\\\",\\n  \\\"x-component\\\":\\\"radio\\\"\\n}\\n\",\n    justCode: true,\n    lang: \"json\"\n  }), React.createElement(\"h2\", {\n    id: \"表单校验描述\",\n    className: \"react-demo-h2\"\n  }, \"表单校验描述\"), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"在表单场景中，校验是必不可少的，同样，为了描述字段的校验规则，我们又扩展了 \", React.createElement(\"strong\", {\n    className: \"react-demo-strong\"\n  }, \"x-rules\"), \" 来描述字段的校验规则\"), React.createElement(ReactCodeSnippet, {\n    code: \"{\\n  type:\\\"string\\\",\\n  \\\"x-component\\\":\\\"radio\\\",\\n  \\\"x-rules\\\":[{pattern:\\\"\\\\\\\\d+\\\",message:\\\"必须是数字\\\"}]\\n}\\n\",\n    justCode: true,\n    lang: \"json\"\n  }), React.createElement(\"h2\", {\n    id: \"表单组件属性描述\",\n    className: \"react-demo-h2\"\n  }, \"表单组件属性描述\"), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"每个表单组件其实都会有自己的一套属性，有控制交互行为的，也有控制样式的，但是这些都与json-schema无关，所以我们只能继续扩展 \", React.createElement(\"strong\", {\n    className: \"react-demo-strong\"\n  }, \"x-props\"), \" 来给传递给具体的表单UI组件\"), React.createElement(ReactCodeSnippet, {\n    code: \"{\\n  type:\\\"string\\\",\\n  \\\"x-rules\\\":[{pattern:\\\"\\\\\\\\d+\\\",message:\\\"必须是数字\\\"}],\\n  \\\"x-props\\\":{multiple:true}\\n}\\n\",\n    justCode: true,\n    lang: \"json\"\n  }), React.createElement(\"h2\", {\n    id: \"表单字段顺序描述\",\n    className: \"react-demo-h2\"\n  }, \"表单字段顺序描述\"), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"因为json-schema描述对象型数据结构同样是使用对象结构来描述，但是想要映射到UI界面上，就会存在一个显示顺序的问题，对象key是无序的，所以，我们就扩展了 \", React.createElement(\"strong\", {\n    className: \"react-demo-strong\"\n  }, \"x-index\"), \" 来控制字段顺序\"), React.createElement(ReactCodeSnippet, {\n    code: \"{\\n  type:\\\"object\\\",\\n  properties:{\\n    aa:{\\n      type:\\\"string\\\",\\n      \\\"x-rules\\\":[{pattern:\\\"\\\\\\\\d+\\\",message:\\\"必须是数字\\\"}],\\n      \\\"x-props\\\":{multiple:true},\\n      \\\"x-index\\\":1\\n    },\\n    bb:{\\n      type:\\\"string\\\",\\n      \\\"x-rules\\\":[{pattern:\\\"\\\\\\\\d+\\\",message:\\\"必须是数字\\\"}],\\n      \\\"x-props\\\":{multiple:true},\\n      \\\"x-index\\\":0\\n    }\\n  }\\n}\\n\",\n    justCode: true,\n    lang: \"json\"\n  }));\n};\n\n__MARKDOWN__.meta = {\n  \"username\": \"zhili.wzl\",\n  \"email\": \"wangzhili56@126.com\"\n};\nmodule.exports = __MARKDOWN__;"],"mappings":"AAEA","sourceRoot":""}