{"version":3,"file":"statics/bundle.25.04be63d1b0972d2dd7c8.js","sources":["webpack:///./docs/API/SchemaForm_React.md"],"sourcesContent":["\"use strict\";\n\nvar React = require('/Users/wangzhili/uform/node_modules/_react@16.8.6@react/index.js');\n\nvar ReactDOM = require('/Users/wangzhili/uform/node_modules/_react-dom@16.8.6@react-dom/index.js');\n\nvar ReactCodeSnippet = require('/Users/wangzhili/uform/node_modules/_react-code-snippet@0.6.12@react-code-snippet/lib/index.js');\n\nvar ReactPropsTable = require('/Users/wangzhili/uform/node_modules/_react-props-table@0.1.3@react-props-table/lib/index.js');\n\nvar __DEFINE__ = function __DEFINE__(fn) {\n  var module = {\n    exports: {}\n  };\n  fn(module, module.exports);\n  var component = module.exports.__esModule && module.exports['default'] || module.exports;\n  return typeof component === 'function' ? component : function () {\n    return React.createElement('div', {}, 'Code snippet should export a component!');\n  };\n};\n\nvar Demo_yaeew_1 = __DEFINE__(function (module, exports) {\n  var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\n  var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\n  exports.__esModule = true;\n  exports[\"default\"] = _default;\n\n  var _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\n  var _react = _interopRequireWildcard(require(\"react\"));\n\n  var _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\n  var _react2 = _interopRequireWildcard(require(\"@uform/react\"));\n\n  var actions = (0, _react2.createFormActions)();\n  (0, _react2.registerFormField)('string', (0, _react2.connect)()(function (props) {\n    return _react[\"default\"].createElement(\"input\", (0, _extends2[\"default\"])({}, props, {\n      value: props.value || ''\n    }));\n  }));\n\n  function _default() {\n    return _react[\"default\"].createElement(_react2[\"default\"], {\n      actions: actions,\n      effects: function effects($) {\n        $('onFieldChange', 'aa').subscribe(function (fieldState) {\n          actions.setFieldState('bb', function (state) {\n            state.value = fieldState.value;\n          });\n        });\n      }\n    }, _react[\"default\"].createElement(_react2.Field, {\n      type: \"string\",\n      name: \"aa\"\n    }), _react[\"default\"].createElement(_react2.Field, {\n      type: \"string\",\n      name: \"bb\"\n    }));\n  }\n});\n\nvar __MARKDOWN__ = function __MARKDOWN__() {\n  return React.createElement(React.Fragment, {}, React.createElement(\"h1\", {\n    id: \"schemaform\",\n    className: \"react-demo-h1\"\n  }, \"SchemaForm\"), React.createElement(\"h2\", {\n    id: \"介绍\",\n    className: \"react-demo-h2\"\n  }, \"介绍\"), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"Rs UForm的核心组件，用于构建表单\"), React.createElement(\"h2\", {\n    id: \"依赖\",\n    className: \"react-demo-h2\"\n  }, \"依赖\"), React.createElement(ReactCodeSnippet, {\n    code: \"import {SchemaForm} from '@uform/react'\\n\\nor \\n\\nimport SchemaForm from '@uform/react'\\n\",\n    justCode: true,\n    lang: \"javascript\"\n  }), React.createElement(\"h2\", {\n    id: \"api\",\n    className: \"react-demo-h2\"\n  }, \"API\"), React.createElement(\"table\", {\n    className: \"react-demo-table\"\n  }, React.createElement(\"thead\", {\n    className: \"react-demo-thead\"\n  }, React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"th\", {\n    align: null,\n    className: \"react-demo-th\"\n  }, \"属性名称\"), React.createElement(\"th\", {\n    align: null,\n    className: \"react-demo-th\"\n  }, \"属性描述\"), React.createElement(\"th\", {\n    align: null,\n    className: \"react-demo-th\"\n  }, \"属性类型\"), React.createElement(\"th\", {\n    align: null,\n    className: \"react-demo-th\"\n  }, \"默认值\"))), React.createElement(\"tbody\", {\n    className: \"react-demo-tbody\"\n  }, React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"defaultValue\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"表单默认值\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"value\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"表单值，受控态使用\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"{}\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"initialValues\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"表单值，受控态使用\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"{}\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"locale\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"表单国际化文案\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"{}\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"component\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"控制SchemaForm是以什么形式渲染，默认是渲染form标签，如果你希望嵌套使用SchemaForm,可以指定为div\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"String/Function\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"\\\"form\\\"\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"schema\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"表单json schema，具体参考 \", React.createElement(\"a\", {\n    href: \"#/MpI2Ij/1gSGSDf5\",\n    className: \"react-demo-a\"\n  }, \"扩展规范\")), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"{type:\\\"object\\\",properties:{}}\")), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"onChange\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"表单变化事件回调\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, React.createElement(\"code\", {\n    className: \"react-demo-code\"\n  }, \"Function(values : Object){}\")), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"onSubmit\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"表单提交事件回调\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, React.createElement(\"code\", {\n    className: \"react-demo-code\"\n  }, \"Function(values : Object){}\")), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"onReset\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"表单重置事件回调\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, React.createElement(\"code\", {\n    className: \"react-demo-code\"\n  }, \"Function(values : Object){}\")), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"onValidateFailed\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"表单校验失败事件回调\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Function\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"editable\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"控制表单字段是否可编辑状态\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, React.createElement(\"code\", {\n    className: \"react-demo-code\"\n  }, \"Boolean | Function(name : String) : Boolean\")), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"actions\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"需要握手的表单actions，只接收通过\", React.createElement(\"a\", {\n    href: \"#/aAUeUD/XEFAF7HoHV\",\n    className: \"react-demo-a\"\n  }, \"createFormActions\"), \"创建出来的actions\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"Object\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })), React.createElement(\"tr\", {\n    className: \"react-demo-tr\"\n  }, React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"effects\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, \"副作用处理函数\"), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  }, React.createElement(\"code\", {\n    className: \"react-demo-code\"\n  }, \"Function( selector : Function, actions: FormActions){}\")), React.createElement(\"td\", {\n    align: null,\n    className: \"react-demo-td\"\n  })))), React.createElement(\"h2\", {\n    id: \"副作用处理\",\n    className: \"react-demo-h2\"\n  }, \"副作用处理\"), React.createElement(\"blockquote\", {\n    className: \"react-demo-blockquote\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"表单副作用，也就是由表单字段的内部事件所产生的联动，校验，异步逻辑，如何更好的管理和维护副作用逻辑，恰好就是rxjs的最大优势，所以，我们采用了rxjs来管理副作用逻辑\")), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"前面API介绍中有讲到effects，这个effects是一个回调函数，它也是一个非常强大的回调函数，它接收了一个selector函数作为参数，我们可以用selector来选择表单内的任意一个字段，对其做状态修改，即便存在异步逻辑，也是可以很方便的在各种异步环境下对字段的状态做修改，所以，我们的表单联动，是不限于时空的。下面可以看一个简单的例子：\"), React.createElement(ReactCodeSnippet, {\n    code: \"import React, { Component } from 'react'\\nimport ReactDOM from 'react-dom'\\nimport SchemaForm, {\\n  registerFormField,\\n  Field,  \\n  connect,\\n  createFormActions\\n} from '@uform/react'\\n\\nconst actions = createFormActions()\\n\\nregisterFormField(\\n  'string',\\n  connect()(props => <input {...props} value={props.value || ''} />)\\n)\\n\\n\\nReactDOM.render(\\n    <SchemaForm actions={actions} effects={($)=>{\\n       $('onFieldChange','aa').subscribe((fieldState)=>{\\n         actions.setFieldState('bb',state=>{\\n           state.value = fieldState.value\\n         })\\n       })\\n    }}>\\n       <Field type=\\\"string\\\" name=\\\"aa\\\"/>\\n       <Field type=\\\"string\\\" name=\\\"bb\\\"/>\\n    </SchemaForm>,\\n    document.getElementById('root')\\n)\\n\",\n    justCode: false,\n    lang: \"jsx\"\n  }, React.createElement(Demo_yaeew_1, {})), React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"上面的例子是实现aa在值改变的时候将bb的值设置为aa的值。\"), React.createElement(\"h2\", {\n    id: \"副作用事件\",\n    className: \"react-demo-h2\"\n  }, \"副作用事件\"), React.createElement(\"blockquote\", {\n    className: \"react-demo-blockquote\"\n  }, React.createElement(\"p\", {\n    className: \"react-demo-p\"\n  }, \"在上面的例子中使用到了事件选择器，事件源主要是以下几种类型\")), React.createElement(ReactCodeSnippet, {\n    code: \"<SchemaForm\\n    effects={($)=>{\\n       $(\\\"onFieldChange\\\").subscribe((fieldState)=>{})\\n       $(\\\"onFormInit\\\").subscribe((formState)=>{})\\n       $(\\\"onFormMount\\\").subscribe((formState)=>{})\\n       $(\\\"onFormReset\\\").subscribe((formState)=>{})\\n       $(\\\"onFormSubmit\\\").subscribe((formState)=>{})\\n       $(\\\"onXXX\\\").subscribe((xxx)=>{}) //自定义事件，主要通过dispatch函数来触发，后面都会提到哪里可以使用dispatch，比如Field组件的x-effect属性，FormConsumer里，FieldRenderProps里\\n    }}\\n/>\\n\",\n    justCode: true,\n    lang: \"javascript\"\n  }), React.createElement(\"h2\", {\n    id: \"用例\",\n    className: \"react-demo-h2\"\n  }, \"用例\"), React.createElement(ReactCodeSnippet, {\n    code: \"import React, { Component } from 'react'\\nimport ReactDOM from 'react-dom'\\nimport SchemaForm, {\\n  registerFormField,\\n  Field,  \\n  connect\\n} from '@uform/react'\\n\\nregisterFormField(\\n  'string',\\n  connect()(props => <input {...props} value={props.value || ''} />)\\n)\\n\\nReactDOM.render(\\n   <SchemaForm defaultValue={{aa:'123'}} onSubmit={values=>console.log(values)}>\\n     <Field name=\\\"aa\\\" type=\\\"string\\\"/>\\n     <button htmlType=\\\"submit\\\">提交</button>\\n   </SchemaForm>\\n,document.getElementById('root'))\\n\",\n    justCode: true,\n    lang: \"javascript\"\n  }));\n};\n\n__MARKDOWN__.meta = {\n  \"username\": \"zhili.wzl\",\n  \"email\": \"wangzhili56@126.com\"\n};\nmodule.exports = __MARKDOWN__;"],"mappings":"AAEA","sourceRoot":""}